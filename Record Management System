#include <stdio.h> // used for standard input/output
#include <stdlib.h> //used for memory allocation
#include <time.h> // used to display time
#include <conio.h> //non-standard in c (also used for input/output)
#include <string.h> // used for comparing 

int main();

  struct  record { 
    char  first_name[20];
    char  last_name[20];
     int  room_no;
    char  inout[10];
    char  place[20];
    
				};

void addrecord(){
   
     char another;
     FILE *fp;
     struct record info;
   do{
   	time_t t;
	time(&t);
	
      system("cls");
       printf("\t\t\t\t=======RECORD MANAGEMENT SYSTEM=======\n\n\n"); 
       fp=fopen("history.txt","a"); 
	    printf("\n\t\t\tDate and time is: %s",ctime(&t));
        printf("\n\t\t\tEnter First Name : ");
          scanf("%s",&info.first_name);
          printf("\n\t\t\tEnter Last Name  : ");
          scanf("%s",&info.last_name);
          printf("\n\t\t\tEnter Room-No    : ");
          scanf("%d",&info.room_no);
          printf("\n\t\t\tTime In/Out      : ");
          scanf("%s",&info.inout);
          printf("\n\t\t\tEnter Place      : ");
          scanf("%s",&info.place);


          printf("\n\t\t\t______________________________\n");
       
      if(fp==NULL){
        fprintf(stderr,"can't open file");
    }else{
        printf("\t\t\tRecord stored successfuly\n");
     }
    
    fwrite(&info, sizeof(struct record), 1, fp); 
    fclose(fp);
    
    printf("\t\t\tYou want to add another record?(y/n) : ");
    
    
    scanf("%s",&another);
    
    
   }while(another=='y'||another=='Y');
};

 void recordrecord(){
   
     FILE *fp;
     struct record info;
     fp=fopen("history.txt","r");
    
     printf("\t\t\t\t=======RECORD MANAGEMENT SYSTEM=======\n\n\n");
      
    if(fp==NULL){
        
        fprintf(stderr,"can't open file\n");
        exit(0);
    }else{
        printf("\t\t\t\tRECORDS :\n");
        printf("\t\t\t\t___________\n\n");
      
    }
        
        while(fread(&info,sizeof(struct record),1,fp)){
        printf("\n\t\t\t\t Student Name      : %s %s",info.first_name,info.last_name);
        printf("\n\t\t\t\t Room Number       : %d",info.room_no);
        printf("\n\t\t\t\t Time In/Out       : %s",info.inout);
        printf("\n\t\t\t\t Place             : %s",info.place);
        printf("\n\t\t\t\t ________________________________\n");
      
         }
        fclose(fp);
        getch();
      
  };

void searchrecord(){
      struct record info;
      FILE *fp;
      int room_no,found=0;
     
    fp=fopen("history.txt","r");
    printf("\t\t\t\t=======SEARCH RECORD=======\n\n\n");
    printf("\t\t\tEnter the room no : ");
    scanf("%d",&room_no);    
    
    
    while(fread(&info,sizeof(struct record),1,fp)>0){
         
        if(info.room_no==room_no){
           
        found=1;
        printf("\n\n\t\t\tStudent Name : %s %s",info.first_name,info.last_name);
        printf("\n\t\t\tRoom NO        : %d",info.room_no);
        printf("\n\t\t\tTime In/Out    : %s",info.inout);
        printf("\n\t\t\tPlace          : %s",info.place);
        printf("\n\t\t\t______________________________________\n");
  
         }
       
    }
     
    if(!found){
       printf("\n\t\t\tRecord not found\n");
    }
  
    fclose(fp);
    getch();
    
};


 void delete1(){
      struct record info;
      FILE *fp, *fp1;
     
       
    int room_no,found=0;
    
       printf("\t\t\t\t=======DELETE RECORD=======\n\n\n");
    fp=fopen("history.txt","r");
    fp1=fopen("temp.txt","w");
    printf("\t\t\t\tEnter the room no : ");
    scanf("%d",&room_no);
    if(fp==NULL){
         printf("can't open file\n");
         exit(0);
      }
    
    while(fread(&info,sizeof(struct record),1,fp)){
        if(info.room_no == room_no){
          
            found=1;
        
        }else{
           fwrite(&info,sizeof(struct record),1,fp1);
        }
  
    }
     fclose(fp);
     fclose(fp1);

    if(!found){
          printf("\n\t\t\t\tRecord not found\n");
          
        }
      if(found){ 
    remove("history.txt");
        rename("temp.txt","history.txt");
        
        printf("\n\t\t\t\tRecord deleted succesfully\n");
        }
 
  getch();
  };

int main()
{	
	begin:
    
    int choice;
    while(choice!=5){
        
    printf("\n\n        \t\t\t=====RECORD MANAGEMENT SYSTEM=====");
    printf("\n\n\n\t\t\t\t     1. Add Record\n");
    printf("\t\t\t\t     2. View History\n");
    printf("\t\t\t\t     3. Search History\n");
    printf("\t\t\t\t     4. Delete History\n");
    printf("\t\t\t\t     5. Exit\n");
    printf("\t\t\t\t    _____________________\n");
    printf("\t\t\t\t     ");
    scanf("%d",&choice);
    
   	   switch(choice)
	{
       case 1:
          system("cls");
          addrecord();
          system("cls");
         break;
     case 2: 
       {int i;
         system("cls");
         char pwd[30] = {0}; 
   		 char ch; 
   			printf("        \t\t\t=====RECORD MANAGEMENT SYSTEM=====");
   			printf("\n\n\n\t\t\tEnter Password: ");
    		for (int i = 0; i < 8; i++) {
       	    ch = getch();
       	    pwd[i] = ch;
       	    ch = '*';
            printf("%c", ch);
		 }
 			pwd[i];
 			
 			if (strcmp(pwd, "sneakkkk") == 0)
		 {
 			printf("\n\n\t\t\tAccess Granted\n\n\t\t\tPress any key to continue.......\n\n");
 			getch(); system("cls");	
            recordrecord();
         
            printf("\t\t\t\t  press any key to exit..... \n");
            getch(); system("cls");
           
     	}
     	else {
     		printf("\n\n\t\t\tAccess denied......");
     		getch(); system("cls");
     	}
         break;
}
     case 3:
       {int i;
        system("cls");
         char pwd[30] = {0}; 
    	char ch; 
 		printf("        \t\t\t=====RECORD MANAGEMENT SYSTEM=====");
   			 printf("\n\n\n\t\t\tEnter Password: ");
    		for (int i = 0; i < 8; i++) {
       	    ch = getch();
       	    pwd[i] = ch;
       	    ch = '*';
            printf("%c", ch);
		 }
 			pwd[i];
 			
 			if (strcmp(pwd, "sneakkkk") == 0)
		 {
 			printf("\n\n\t\t\tAccess Granted\n\n\t\t\tPress any key to continue.......\n\n");
 			getch(); system("cls");
            searchrecord();
            printf("\t\t\t\t  press any key to exit..... \n");
            getch();
            system("cls");
     	}
     	else {
     		printf("\n\n\t\t\tAccess denied......");
     		getch(); system("cls");
     	}
         break;
}
     case 4:
      {int i;
        system("cls");
         char pwd[30] = {0}; 
    	char ch; 
 		printf("        \t\t\t=====RECORD MANAGEMENT SYSTEM=====");
   			 printf("\n\n\n\t\t\tEnter Password: ");
    		for (int i = 0; i < 8; i++) {
       	    ch = getch();
       	    pwd[i] = ch;
       	    ch = '*';
            printf("%c", ch);
		 }
 			pwd[i];
 			
 			if (strcmp(pwd, "sneakkkk") == 0)
		 {
 			printf("\n\n\t\t\tAccess Granted\n\n\t\t\tPress any key to continue.......\n\n");
 			getch(); system("cls");
            delete1();
            printf("\t\t\t\t  press any key to exit..... \n");
            getch();
            system("cls");
     	}
     	else {
     		printf("\n\n\t\t\tAccess denied......");
     		getch(); system("cls");
     	}
         break;
}
     case 5:
          system("cls");
          printf("\n\t\t\t\tThank you for using our system.\n\n");
          printf("\n\n\t\t\t\t  Project in C by Paulonatics");
          printf("\n\n_______________________________________________");
          printf("\n\n\t\t*Aaron Villanueva\n\t\t*Rav Gerard Naceno\n\t\t*John Paulo Pascua");
          printf("\n\n_______________________________________________");
          exit(0);
        break;
    
    default:

    int choice;
    while (1) 
	{
        if (choice >= 1 && choice <= 5)		
		{
            break;
        } 
		
		else 
		{
 			char c;
            while ((c = getchar()) != '\n' && c != EOF) { } // used to clear input buffer, removing will make the system unstable and buggy.
            printf("\t\t\t\t     Invalid input, Try again...");
            printf("\t\t\t\t     ");
            getchar(); system("cls");
            goto begin;
        }
    }
    break;


  
   


}
	}
}
